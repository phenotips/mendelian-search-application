<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>data</web>
  <name>MendelianResults</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1424444184000</creationDate>
  <parent>data.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1428522465000</date>
  <contentUpdateDate>1428510855000</contentUpdateDate>
  <version>1.1</version>
  <title>MendelianResults</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{include document='PhenoTips.MendelianSearch' /}}
{{velocity}}
$xwiki.jsx.use('data.MendelianResults')##
$xwiki.jsx.use('PhenoTips.d3')##
$xwiki.ssx.use('data.MendelianResults')##
#if($request &amp;&amp; $request.getMethod() == 'POST' &amp;&amp; "$!{request.getParameter('gene')}" != '' &amp;&amp; "$!{request.getParameterValues('phenotype')}" != '')
  #set ($count = $services.MendelianSearch.count($request))
  #set ($displayResults = true)
#else
  #set ($displayResults = false)
#end
#if (!${displayResults})
  {{html clean=false}}
  &lt;div class="infomessage box"&gt;Select your search terms above&lt;/div&gt;
  {{/html}}
#else
  {{html clean = false}}
## hidden element containing the previous request string for use in asynchronous requests
&lt;form id='hidden-query-form' action="$request.getRequestURL()" method='post'"&gt;
  &lt;div&gt;
  #foreach($param in $request.getParameterNames())
    #foreach($value in $request.getParameterValues($param))
      &lt;input type='hidden' name="$param" value="$value"/&gt;
    #end
  #end
  &lt;input type='hidden' name='title' value=''/&gt;
  &lt;/div&gt;
&lt;/form&gt;
&lt;div id="mendelian-results"&gt;
  &lt;div id="mendellian-overview-container"&gt;
  &lt;h4 class='graph-heading'&gt;Overview&lt;/h4&gt;
  #if($count.size() == 0 )
    &lt;div class='grid-view'&gt;
      &lt;table class = 'grid-visualization'&gt;
        &lt;tr&gt;
          &lt;!-- Blank cells for alignment --&gt;
          &lt;td class='blank-cell' colspan='2' rowspan='2'&gt;&lt;/td&gt; 
          &lt;td colspan='2'&gt;Matching Gene&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td class='yn-cell'&gt;Yes&lt;/td&gt;
          &lt;td class='yn-cell'&gt;No&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td class='vertical-text' rowspan='2'&gt;&lt;div&gt;Matching Phenotype&lt;/div&gt;&lt;/td&gt;
          &lt;td class='yn-cell'&gt;Yes

          &lt;/td&gt;
          &lt;td class='results-cell category-button'&gt;
            &lt;span class='patient-number'&gt;$count.getInt('withBoth')&lt;/span&gt;&lt;br/&gt;Patients
            &lt;input type='hidden' name='title' value='Displaying Patients With Matching Phenotypes And Variants'/&gt;
            &lt;input type='hidden' name='matchGene' value='1'/&gt;
            &lt;input type='hidden' name='matchPhenotype' value='1'/&gt;
          &lt;/td&gt;
          &lt;td class='results-cell category-button'&gt;
            &lt;span class='patient-number'&gt;$count.getInt('withPhenotype')&lt;/span&gt;&lt;br/&gt;Patients
            &lt;input type='hidden' name='title' value='Displaying Patients With Matching Phenotypes And Non-matching Variants'/&gt;
            &lt;input type='hidden' name='matchGene' value='0'/&gt;
            &lt;input type='hidden' name='matchPhenotype' value='1'/&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td class='yn-cell'&gt;No
          &lt;/td&gt;
          &lt;td class='results-cell category-button'&gt;
            &lt;span class='patient-number'&gt;$count.getInt('withGene')&lt;/span&gt;&lt;br/&gt;Patients
            &lt;input type='hidden' name='title' value='Displaying Patients With Matching Variants And Non-matching Phenotype'/&gt;
            &lt;input type='hidden' name='matchGene' value='1'/&gt;
            &lt;input type='hidden' name='matchPhenotype' value='0'/&gt;
          &lt;/td&gt;
          &lt;td class='results-cell category-button'&gt;
            &lt;span class='patient-number'&gt;$count.getInt('withNeither')&lt;/span&gt;&lt;br/&gt;Patients
            &lt;input type='hidden' name='title' value='Displaying Patients That Did Not Match Either The Symptoms or The Variants'/&gt;
            &lt;input type='hidden' name='matchGene' value='0'/&gt;
            &lt;input type='hidden' name='matchPhenotype' value='0'/&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  #else
    &lt;input type="hidden" value=$count id="box-plot-values" /&gt;
    &lt;svg id='chart'&gt;&lt;/svg&gt;
  #end
  &lt;/div&gt;
  &lt;div id="mendelian-livetable-container"&gt;&lt;/div&gt;
 &lt;/div&gt;
{{/html}}
#end
{{/velocity}}</content>
  <object>
    <name>data.MendelianResults</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ada3713a-0b08-4c0b-bd4d-c3583d467654</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.MendelianLivetable = Class.create({
    
    mendelianLiveTableResultsURL : "${xwiki.getURL('PhenoTips.MendelianLivetableResults', 'get')}",
    DEFAULT_RESULTS_PER_PAGE : 20,
    DEFAULT_PAGE : 1,

    initialize : function(queryForm, container){
      this.queryForm = queryForm;
      this.container = container;
      this.container.update('');

      this.page = this.DEFAULT_PAGE;
      this.resultsPerPage = this.DEFAULT_RESULTS_PER_PAGE;

      this.tableHeading = new Element('h4', {'class' : 'table-heading'}).update(this.queryForm.getInputs('hidden', 'title')[0].getValue());
      this.container.insert(this.tableHeading);
      
      this.resultsTable = new Element('table', {'class' : 'mendelian-results-table'});
      this.container.insert(this.resultsTable);
      this.tableControls = new Element('div', {'class' : 'mendelian-livetable-controls'});
      this.container.insert(this.tableControls);
      this.launchSearch();
    },

    initializeControls : function(){
      var numberOfResults = this._data.length;
      var fromResult = this.resultsPerPage*(this.page-1)+1;
      var toResult = Math.min(this.resultsPerPage*this.page, numberOfResults);

      this.resultsSummary = new Element('p').update("Displaying results " + fromResult + '-' + toResult);

      var resultsPerPagePicker = this.generateResultsPerPagePicker();
      var pageSelector = this.generatePageSelector();
      this.tableControls.insert(this.resultsSummary);
      this.tableControls.insert(resultsPerPagePicker);
      this.tableControls.insert(pageSelector);
    },

    generateResultsPerPagePicker : function(){
      var _this = this;
      var result = new Element('p', {'class' : 'results-per-page'}).update(_this.strings["control.resultsPerPage.label"]);
      var select = new Element('select');
      [10, 20, 50].each(function(i) {
        var option = new Element('option', {'value' : i}).insert(i);
        if (i === _this.resultsPerPage){
          option.setAttribute('selected', 'selected');
        }
        select.insert(option);
      });
      select.observe('change', _this.handleResultsPerPageChange.bind(_this));
      result.insert(select);
      return result;
    },

    generatePageSelector : function(){
      var _this = this;
      this.page = this.page || this.DEFAULT_PAGE;

      var displayPrevious = this.page &gt; 1;
      var displayNext = this._data.length &gt; this.resultsPerPage*this.page;

      var currentPageDisplay = new Element('span', {'class' : 'current-page'}).update(this.page);
      
      var result = new Element('p', {'class' : 'page-selector'}).update('Page: ');
      if(displayPrevious){
        var previousButton = new Element('a', {'class' :  'page-selector-button', 'href' : '#'}).update('&lt;').observe('click', _this.handleNewPage.bindAsEventListener(_this, -1));
        result.insert(previousButton);
      }
      result.insert(currentPageDisplay);
      if (displayNext){
        var nextButton = new Element('a', {'class' :  'page-selector-button', 'href' : '#'}).update('&gt;').observe('click', _this.handleNewPage.bindAsEventListener(_this, 1));
        result.insert(nextButton);
      }
      return result;

    },

    handleNewPage : function(event, increment){
      event.stop();
      var newPage = this.page + increment;
      if (newPage&lt;1) {
        return;
      }
      this.page = newPage;
      $$('div.mendelian-livetable-controls span.current-page')[0].update(newPage);
      this.resultsSummary.update("Displaying results " + (this.resultsPerPage*(this.page-1)+1) + '-' + (this.resultsPerPage*this.page));
      this.launchSearch();
    },

    handleResultsPerPageChange : function(event) {
      event.stop();
      var newValue = Event.element(event).value;
      if (isNaN(newValue)){
        return;
      }
      this.resultsPerPage = parseInt(newValue);
      this.resultsSummary.update("Displaying results " + (this.resultsPerPage*(this.page-1)+1) + '-' + (this.resultsPerPage*this.page));
      this.launchSearch();
    },

    launchSearch : function(){
      if (this.activeSearch) {return;}
        var _this = this;
        this.activeSearch = new Ajax.Request(
          this.mendelianLiveTableResultsURL,
          {
            parameters: $H({
              'outputSyntax' : "plain",
              'resultsPerPage' : _this.resultsPerPage || _this.DEFAULT_RESULTS_PER_PAGE,
              'page' : _this.page || _this.DEFAULT_PAGE
            }).merge(_this.queryForm.serialize(true)).toObject(),
            method: "POST",
            onCreate : function() {
              _this.tableControls.update('');
              _this.resultsTable.update('&lt;p class="loading"&gt;Searching...&lt;/p&gt;');
            },
            onSuccess: function(response) {
              _this.displayResults(response.responseJSON);
              _this.initializeControls();
            },
            onComplete : function() {
              _this.addEventListeners();
              _this.container.removeClassName('loading');
              _this.activeSearch = false;
            }
          });
    },

    displayResults : function (data) {
        var _this = this;
        this._data = data.results;

        //HACK: Temporary demo stuff--both categories will be returned to the ui-- must decide on which to use
        var matchGene = parseInt(this.queryForm.select('input[name="matchGene"]')[0].getValue());
        if (matchGene){
          this._data = this._data.matching;
        } else {
          this._data = this._data.nonMatching;
        }
        // Empty the container to make room for the new results
        if (this.resultsTable.childElements()) {
                this.resultsTable.update('');
            }
            var columns = {
              "expandTriangle" : {
                heading : '',
                display : _this.displayResultExpandTriangle.bind(_this)
              },
              "patientId" : {
                heading : _this.strings["patientId.heading"],
                display : _this.displayResultPatientId.bind(_this)
              },
              "owner" : {
                heading : _this.strings["owner.heading"],
                display : _this.displayResultOwner.bind(_this)
              },
              "phenotypeScore" : {
                heading : _this.strings["phenotypeScore.heading"],
                display : _this.displayResultPhenotypeScore.bind(_this)
              },
              "numberOfVariants" : {
                heading : _this.strings["numberOfVariants.heading"],
                display : _this.displayResultNumberOfVariants.bind(_this)
              }
            };
       
          this._displayTableHeader(columns, this.resultsTable);

        this._data.sort(function(a, b){
          return a.phenotypeScore &lt; b.phenotypeScore;
        });
          this._data.each(function(r) {
        _this._displayPatientRow(r, columns, _this.resultsTable);
        _this._displayPatientSubTable(r, Object.getOwnPropertyNames(columns).length, _this.resultsTable);
      });

        },

      _displayTableHeader : function (columns, table) {
        var row = this._getEmptyRow(table);
        for (var c in columns) {
          row.insert(new Element("th", {"class" : c}).update(columns[c].heading));
        }
        return row;
      },

      _getEmptyRow : function(table, className) {
        var row;
        if (className) {
          row = new Element('tr', {'class' : className});
        } else {
          row = new Element('tr');
        }
        table.insert(row);
        return row;
      },

      _displayPatientRow : function(rowData, columns, table){
        var row = this._getEmptyRow(table, 'patient-row');
        for (var c in columns) {
        row.insert(columns[c].display(rowData));
      }
      return row;
      },

      //the display result functions all return a td element that will be used to display the upper level data for each patient
      displayResultExpandTriangle : function() {
        return new Element('td').update('&lt;div class="triRight"&gt;&lt;/div&gt;');
      },

      displayResultPatientId : function(data) {
        var cell = new Element('td');
        cell.insert(new Element('p').update(data.patientID));
        return cell;
      },

      displayResultOwner : function(data) {
        var cell = new Element('td');
        cell.insert(new Element('p').update(data.owner));
        return cell;

      },

      displayResultPhenotypeScore : function(data) {
        var cell = new Element('td');
        cell.insert(new Element('p').update(Math.round(data.phenotypeScore * 100) / 100));
        return cell;
      },

      displayResultNumberOfVariants : function(data) {
        var cell = new Element('td');
        cell.insert(new Element('p').update(data.variants.length));
        return cell;
      },

      _displayPatientSubTable : function(data, width, table) {
        var row = this._getEmptyRow(table, 'patient-subResult');
        var containerCell = new Element('td', {'colspan' : width });
        var container = new Element('div', {'class' :  'collapsed'});
        
        var phenotypeContainer = new Element('div', {'class' : 'patient-phenotype-container'});
        phenotypeContainer.insert(new Element('h6').update(this.strings['patientSymptom.heading']));
        phenotypeContainer.insert(this.generatePhenotypeList(data.phenotype));
        container.insert(phenotypeContainer);

        var variantContainer = new Element ('div', {'class' :'patient-variant-container'});
        variantContainer.insert(new Element('h6').update(this.strings['patientVariantsHeading']));
        variantContainer.insert(this.generateVariantList(data.variants));
        container.insert(variantContainer);

        row.insert(containerCell.insert(container));
        return row;
      },

      generatePhenotypeList : function(data) {
        //right now phenotype information is just a list of strings. 
        var _this = this;
        var phenotypeList = new Element('ul');
        data.each(function(e){
          phenotypeList.insert(new Element('li').update(e));
        });
        return phenotypeList;
      },
      generateVariantList: function(variants) {
        //variant keys: "chr", "posisiton" , "ref", "alt" , "effect", "score"
        var _this = this;
        var variantList = new Element('ul');
        variants.each(function(v){
          variantList.insert(_this.displayVariantListElement(v));
        });
        return variantList;
      },
      displayVariantListElement : function(variant){
        var _this = this;
        var listElement = new Element('li');

        var leftColumn = new Element('div', {'class' : 'left'});
        var rightColumn = new Element('div', {'class' : 'right'});
        //TODO: link genesymbol to somewhere. Probably UniProt
        var geneElement = new Element('p', {'class' : 'gene-name'}).update( _this.strings["geneSymbol"]+ ": " + variant.geneSymbol);
        leftColumn.insert(geneElement);
        
        if (variant.chr &amp;&amp; variant.position &amp;&amp; variant.ref) {
          var start = variant.position;
          var end = variant.position + variant.ref.length;
          var positionText = _this.strings["positionPhrase"].replace("__CHROMOSOME__",variant.chr.toUpperCase()).replace("__START__", start).replace("__STOP__", '&lt;br/&gt;' + end);
          var positionURLFragment = "Chr" + variant.chr.toUpperCase() + ": " + start + "-" + end;
          var assembly = variant.assembly || "hg19";
          var position = new Element('a', {
            'href' : 'http://genome.ucsc.edu/cgi-bin/hgTracks?db=' + assembly + '&amp;position=' + encodeURIComponent(positionURLFragment),
            'class' : 'variant-position',
            'target' : '__blank',
            'title' : _this.strings["variantPositionLinkTitle"]
          }).update(positionText);
          leftColumn.insert(position);
        }
        
        var varScore = new Element('div', {'class' : 'variant-score'});
        varScore.insert("&lt;p&gt;" + this.strings["score.label"] + ": &lt;/p&gt;");
        varScore.insert(this.Utils.generateSegmentedBar(5, variant.score));
        rightColumn.insert(varScore);



        var displayedRef = (variant.ref.length &gt; 5) ? (variant.ref.substring(0,5)+"...") : variant.ref;
        var displayedAlt = (variant.alt.length &gt; 5) ? (variant.alt.substring(0,5)+"...") : variant.alt;
        rightColumn.insert("&lt;div class='variant-change'&gt;&lt;span class='dna-fragment ref'&gt;" + displayedRef + "&lt;/span&gt; → &lt;span class='dna-fragment alt'&gt;" + displayedAlt + "&lt;/span&gt;&lt;/div&gt;");
        rightColumn.insert("&lt;p class='variant-type'&gt;" + variant.effect + "&lt;/p&gt;");
        
        listElement.insert(leftColumn);
        listElement.insert(rightColumn);

        listElement.insert(_this.generateVariantSearchButton(variant));
        
        return listElement;
      },

      generateVariantSearchButton : function(variant) {
        var _this = this;
        var button = new Element('div', {'class' : 'variant-search-redo'}).update(this.strings["variantSearchButton"]);
        button.observe('click', function(b) {
          _this.queryForm.select('input[name="variantSearch"]')[0].setValue(1);
          _this.queryForm.select('input[name="varChr"]')[0].setValue(variant.chr);
          _this.queryForm.select('input[name="varPos"]')[0].setValue(variant.pos);
          _this.queryForm.select('input[name="varRef"]')[0].setValue(variant.ref);
          _this.queryForm.select('input[name="varAlt"]')[0].setValue(variant.alt);
          _this.submitHiddenForm();
        });
        return button;
      },

      addEventListeners : function() {
        $$('tr.patient-row').each(function(r){
           r.observe('click', function(){
              var container = this.next().down().down();
              if(container.hasClassName('collapsed')){
                container.removeClassName('collapsed');
                r.addClassName('expanded');
                r.select('div.triRight')[0].addClassName('triDown');
              } else {
                 container.addClassName('collapsed');
                r.removeClassName('expanded');
                r.select('div.triRight')[0].removeClassName('triDown');
             }
          });
        });
      },

      submitHiddenForm : function() {
        this.queryForm.submit();
      },

      strings : {
        "patientId.heading"   : "ID",
        "owner.heading"     : "Owner",
        "phenotypeScore.heading"   : "Phenotype Score",
        "numberOfVariants.heading" : "Variants observed",
        "more.heading"      : "More info",
        "noPhenotypeOrVariants.text" : "Nothing to display",
        "showMore.button"   : "More...",
        "patientSymptom.heading": "Symptoms observed in this patient",
        'patientVariantsHeading': "Variants found in this patient",
        'variant.position.heading': "Position",
        'variant.change.heading': "Change",
        'variant.effect.heading': "Effect",
        'variant.score.heading' : "Score",
        'geneSymbol'        : "Gene symbol",
        'score.label'       : "Exomiser score",
        "positionPhrase"  : "chr__CHROMOSOME__:__START__-__STOP__",
        "variantPositionLinkTitle" : 'Visualize in the UCSC Genome Browser',
        'variantSearchButton'   : "Redo search with this variant",
        'control.resultsPerPage.label' : 'Results per page: '
      },

      Utils : {
        generateSegmentedBar : function (count, value) {
          var bar = new Element('div', {'class' : 'segmented-bar', title : Math.round(value * 100) + '%' || ''});
          var valueUnit = 1 / count;
          for (var i = 0; i &lt; count; ++i) {
            var segmentFill = Math.round(100 * Math.min(Math.max((value - i * valueUnit) / valueUnit, 0), 1));
            var segment = new Element('span', {'class' : 'segmented-unit'}).update(
                          new Element('span', {
                            'class' : 'segmented-unit-fill',
                            'style' : "width: " + segmentFill + "%"
                          })
            );
            bar.insert(segment);
          }
          return bar.insert(' ' + Math.round(value * 100) + '%');
        }
      },
  });
  
  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>MendelianLivetable</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>data.MendelianResults</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>bca6c561-900b-46e7-af79-f0b39c574ef0</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>var boxPlotGenerator = function () {
  var data = JSON.parse($('box-plot-values').value);
  xAxisLabels = ["With Gene Variants", "Without Gene Variants"];
  chartTitles = ["Displaying Patients With Matching Variants", "Displaying Patients With Non-matching Variants"];
  var margin = {top: 20, right: 0, bottom:30, left:50};
  var height = 400-margin.top-margin.bottom;
  var width = 400 - margin.right- margin.left;

  var boxWidth = 20;

  var y =d3.scale.linear().range([height,0]).domain([0,1]);
  var x = d3.scale.ordinal().rangeRoundBands([0,width], 0.1).domain(['withGene', 'withoutGene']);

  var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .tickFormat(function(d, i){
      return xAxisLabels[i];
    });
  
  var yAxis = d3.svg.axis().scale(y).orient('left');

  var chart = d3.select('#chart')
    .attr('width', width+margin.right+ margin.left)
    .attr('height', height+margin.top+margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var category =chart.selectAll('g').data(Object.keys(data))
    .enter()
    .append('g')
      .attr('class', 'category')
      .attr('transform', function(d, i){
         return "translate(" + x(Object.keys(data)[i]) + ", 0)";
      });

  //Data points
  category.selectAll('circle')
    .data(function(d){return data[d];})
    .enter()
    .append('circle')
      .attr('class', 'data-point')
      .attr('cx', function(){ return nrmRandom(x.rangeBand(), 0.2);})
      .attr('cy', function(d , i){return y(d);})
      .attr('r','1.5px');

console.log(data[category.datum] + "," +category.datum)
  //Median lines
  category.append('line')
    .attr('class', 'box-plot')
    .attr('x1',(x.rangeBand()-boxWidth)/2)
    .attr('x2', (x.rangeBand()+boxWidth)/2)
    .attr('y1', function(d){ return y(getMedian(data[d]));})
    .attr('y2', function(d){return y(getMedian(data[d]));});

  //Boxes
  category.append('rect')
    .attr('class', 'box-plot')
    .attr('x', (x.rangeBand()-boxWidth)/2)
    .attr('y', function (d) {return y(getUpperQuartile(data[d]));})
    .attr('width', boxWidth)
    .attr('height', function(d) { return y(getLowerQuartile(data[d]))-y(getUpperQuartile(data[d]));});

  //Min Lines
  category.append('line')
    .attr('class', 'box-plot')
    .attr('x1',(x.rangeBand()-boxWidth)/2)
    .attr('x2', (x.rangeBand()+boxWidth)/2)
    .attr('y1', function(d){ return y(d3.min(data[d]));})
    .attr('y2', function(d){ return y(d3.min(data[d]));});

  //Max Lines
  category.append('line')
    .attr('class', 'box-plot')
    .attr('x1',(x.rangeBand()-boxWidth)/2)
    .attr('x2', (x.rangeBand()+boxWidth)/2)
    .attr('y1', function(d){ return y(d3.max(data[d]));})
    .attr('y2', function(d){ return y(d3.max(data[d]));});

  //Min whiskers
  category.append('line')
    .attr('class', 'whisker box-plot')
    .attr('x1', x.rangeBand()/2)
    .attr('x2', x.rangeBand()/2)
    .attr('y1', function(d){ return y(d3.max(data[d]));})
    .attr('y2', function(d){ return y(getUpperQuartile(data[d]));});

  //Max whiskers
  category.append('line')
    .attr('class', 'whisker box-plot')
    .attr('x1', x.rangeBand()/2)
    .attr('x2', x.rangeBand()/2)
    .attr('y1', function(d){ return y(getLowerQuartile(data[d]));})
    .attr('y2', function(d){ return y(d3.min(data[d]));});

  //labels
  var labelX = (x.rangeBand()+boxWidth)/2 + 4;
  var offsetY = 4;

  // Max labels
  category.append('text')
    .attr('class', 'box-label')
    .attr('dx', labelX)
    .attr('dy', function(d){ return y(d3.max(data[d]))+ offsetY;})
    .text(function(d){ return roundDecimals(d3.max(data[d]), 2);})
    .style("text-anchor", "start");
  // UpperQ labels
  category.append('text')
    .attr('class', 'box-label')
    .attr('dx', labelX)
    .attr('dy', function(d){ return y(getUpperQuartile(data[d])) + offsetY;})
    .text(function(d){ return roundDecimals(getUpperQuartile(data[d]), 2);})
    .style("text-anchor", "start");
  // Median labels
  category.append('text')
    .attr('class', 'box-label')
    .attr('dx', labelX)
    .attr('dy', function(d){ return y(getMedian(data[d])) + offsetY;})
    .text(function(d){ return roundDecimals(getMedian(data[d]), 2);})
    .style("text-anchor", "start");
  //LowerQ labels
  category.append('text')
    .attr('class', 'box-label')
    .attr('dx', labelX)
    .attr('dy', function(d){ return y(getLowerQuartile(data[d])) + offsetY;})
    .text(function(d){ return roundDecimals(getLowerQuartile(data[d]), 2);})
    .style("text-anchor", "start");
  //Min labels
  category.append('text')
    .attr('class', 'box-label')
    .attr('dx', labelX)
    .attr('dy', function(d){ return y(d3.min(data[d])) + offsetY;})
    .text(function(d){ return roundDecimals(d3.min(data[d]), 2);})
    .style("text-anchor", "start");

  //Info labels
  var infoLabel = category.append('g')
    .attr('transform', function(d){
      var yPos =  (y(getUpperQuartile(data[d])) &gt;  height - y(0.2)) ? y(0.2) : y(getUpperQuartile(data[d]));
      return 'translate(0,'+ yPos +')';
    });

  infoLabel.append('rect')
    .attr('class', 'info-label')
    .attr('height', '3em')
    .attr('width', x.rangeBand()/2.5);

  infoLabel.append('text')
    .text(function(d) {return 'n: ' + data[d].length;})
    .attr('class', 'info-label')
    .attr('dx', '.5em')
    .attr('dy', '1.25em')
    .style("text-anchor", "start");
  infoLabel.append('text')
    .text(function(d) {return 'Mean: ' + roundDecimals(d3.mean(data[d]), 2);})
    .attr('class', 'info-label')
    .attr('dx', '.5em')
    .attr('dy', '2.25em')
    .style("text-anchor", "start");


  //Axes
  chart.append("g").attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  chart.append("g").attr("class", "y axis")
    .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("x", -(height-margin.top)/2)
      .attr("dy", "-3em")
      .style("text-anchor", "middle")
      .text("Phenotypic Similarity Score");

  //Hover/Click Boxes
  var clickArea = category.append('rect')
    .attr('class', 'hover-box category-button')
    .attr('width', x.rangeBand())
    .attr('height', height);

  var inputContainer = clickArea.append('foreignObject');

  inputContainer.append('input')
      .attr('type','hidden')
      .attr('name', 'matchGene')
      .attr('value', function(d){
        return (d==='withGene') ? 1 : 0;
      });
   inputContainer.append('input')
      .attr('type','hidden')
      .attr('name', 'title')
      .attr('value', function(d, i) {
        return chartTitles[i];
      });

  function nrmRandom( mean, std) {
      return ((Math.random() + Math.random() + Math.random() + Math.random() + Math.random() + Math.random()) - 3) / 3 * mean *std + mean/2;
  }

  function getUpperQuartile (A){
    if (!A) return null;
    A.sort();
    var index = Math.round(A.length*0.75)-1;
    return A[index];
  }

  function getLowerQuartile (A){
    if (!A) return null;
    A.sort();
    var index = Math.round(A.length*0.25)-1;
    return A[index];
  }

  function getMedian (A){
    if (!A) return null;
    A.sort();
    var index = Math.round(A.length*0.5)-1;
    return A[index];
  }
  function roundDecimals(N, D){
    if (!N) return null;
    var modifier = Math.pow(10,D);
    return Math.round(N*modifier)/modifier;
  }
};</code>
    </property>
    <property>
      <name>BoxPlotGenerator</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>data.MendelianResults</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>5974718a-42b4-4aba-93c1-f4c7eb227902</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>(function(){
    function MendelianResultsController() {
      if ($('chart') &amp;&amp;  $('box-plot-values')){
        boxPlotGenerator();
      }
      var queryForm = $('hidden-query-form');
      var container = $('mendelian-livetable-container');

      //get the first chart title and add it to the form
      var titleElement = $$('.category-button input[name="title"]')[0];
      var chartTitle = titleElement.getAttribute('value');
      queryForm.getInputs('hidden', 'title')[0].setValue(chartTitle);

      initializeOverviewButtons();

      launchMendelianLivetable(queryForm, container);

      function initializeOverviewButtons(){
        var buttons = $$('.category-button');
        buttons.each(function(b){
          Element.observe(b, 'click', categoryChangeHandler);
        });
      }

      function categoryChangeHandler(event) {
        event.stop();
        var category = this;
        var title = Element.select(category, 'input[name="title"]')[0].getAttribute('value') || "";
        var phenotypeMatchElement = Element.select(category, 'input[name="matchPhenotype"]')[0];
        var matchPhenotype = (phenotypeMatchElement) ? phenotypeMatchElement.getAttribute('value') : 1;
        var matchGene = Element.select(category, 'input[name="matchGene"]')[0].getAttribute('value') || 1;
        
        if(isNaN(matchPhenotype) || isNaN(matchGene)){
          return;
        }

        queryForm.getInputs('hidden', 'title')[0].setValue(title);
        queryForm.getInputs('hidden', 'matchGene')[0].setValue(matchGene);
        queryForm.getInputs('hidden', 'matchPhenotype')[0].setValue(matchPhenotype);

        launchMendelianLivetable(queryForm, container);
      }

      function launchMendelianLivetable(form, container) {
        if (form &amp;&amp; container) {
          new PhenoTips.widgets.MendelianLivetable(form, container);
        }
      }

    }

  document.observe('xwiki:dom:loaded', MendelianResultsController);
}());</code>
    </property>
    <property>
      <name>MendelianResultsController</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>data.MendelianResults</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>2b621d55-392e-42c5-89c5-b5b408e4ba39</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

#mendellian-overview-container{
  float: left;
  width: 400px;
}

#mendelian-livetable-container{
  padding: 0 1em;
  margin-left: 400px;
  width: auto;
}
.mendelian-livetable-controls &gt; *{
  float: right;
  font-size: 90%;
  margin: 0 1em 0 0;
}
.mendelian-livetable-controls p:first-child{
  float: left;
}
.mendelian-livetable-controls .results-per-page{
  margin-right: 0;
}
#hidden-query-form{
  display: none;
}
#mendelian-livetable-container .loading {
    display: block;
    text-align: center;
    height: 5em;
}
.mendelian-results-table{
  border: none;
  border-collapse: separate;
  border-spacing: 0px 3px ;
  font-size: 12px;
  text-align: left;
  width: 100%;
}

.mendelian-results-table tr th {
  background: inherit;
  border: none;
  border-bottom: 1px solid #444;
  vertical-align: bottom;
}

.patient-row td {
  background-color: white;
  border: none;
  border-bottom: 1px solid #EEE;
  padding: 5px;
  position: relative;
}

.patient-row:hover td {
  cursor: pointer;
  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.8);
}
.patient-row:hover td:first-child {
  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.8);
}
.patient-row:hover td:after, .patient-row.expanded td:after {
  background-color: white;
  content: "";
  height: 100%;
  position: absolute;
  right: 0;
  top: 0;
  width: 3px;
  z-index: 1;
}
.patient-row.expanded td {
  box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.8);
}
.patientrow.expanded td:first-child {
  box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.8);
}
.patient-row .triRight {
    height: 0;
    width: 0;
    border-left: 8px solid $theme.titleColor;
    border-top: 4px solid transparent;
    border-bottom: 4px solid transparent;
}
.patient-row .triDown {
    border-top: 8px solid $theme.titleColor;   
    border-left: 4px solid transparent;   
    border-right: 4px solid transparent;
}
.patient-subResult&gt;td{
  border: none;
  padding: 0 5px;
}
.patient-subResult&gt;td&gt;div{
  box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.8);
  margin-top:-6px;
  max-height: 500px;
  overflow: hidden;
  transition: max-height 1s;
  z-index:2;
}
.patient-subResult&gt;td&gt;.collapsed{
  max-height: 0px;
}

.patient-subResult td&gt;div&gt;div{
  display:inline-block;
  width: 49.5%;
}
.patient-subResult h6{
  font-size: larger;
  margin: 15px 0 5px 0;
  padding-left: .5em;
  width: 100%;
}
.patient-subResult .patient-phenotype-container{
  float: left;
}
.patient-subResult .patient-variant-container{
  border-left: 1px #ddd dotted;
  float: right;
}
.patient-variant-container ul {
  list-style: none;
  margin: 0 1em;
}

.patient-variant-container li {
  border-bottom: 1px solid #EEE;
  overflow: auto;
  padding: 0.5em .5em;
}

.patient-variant-container li .left {
  float: left;
  width: 50%;
}

.patient-variant-container li .right {
  float: right;
  width: 50%;
}

.patient-variant-container li &gt; div &gt; *:first-child {
  font-size: larger;
  margin: 0;
}

.variant-score * {
  display: inline-block;
  margin-bottom: 0;
  margin-right: 1em;
}

.variant-change {
  text-align: center;
}

.variant-type {
  text-align: center;
}

.variant-position {
  display: block;
  overflow-wrap: break-word;
  text-align: left;
  word-wrap: break-word;
}

.variant-search-redo {
  clear: both;
  text-align: center;
}

.variant-search-redo:hover {
  cursor: pointer;
  color: $theme.linkColor;
}
.segmented-bar {
  color: red;
  font-size: 75%;
  white-space: nowrap;
  width: auto;
}
.segmented-bar .segmented-unit {
  border: 1px solid black;
  border-radius: 1px;
  display: inline-block;
  height: 5px;
  margin: 0 1px;
  width: 5px;
}
.segmented-bar .segmented-unit-fill {
  background-color: red;
  border-radius: 1px;
  height: 5px;
  display: block;
  width: 5px;
}
</code>
    </property>
    <property>
      <name>MendelianLivetableStyles</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>data.MendelianResults</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>8ef3bf5f-57ef-4ff2-8577-3de3bcf516e0</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>h4.graph-heading{
 margin-top: 0;
}
div.grid-view table{
  border-spacing: 0;
  border-collapse: collapse;
  font-family: sans-serif;
  color: #444;
}
div.grid-view table td {
  border: 1px solid #DDD;
  padding: 10px;
  text-align: center;
}
div.grid-view td.blank-cell {
  border: none;
}
div.grid-view td.vertical-text{
  width: 1em;
}
div.grid-view td.vertical-text div{
  display: block;
  transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
  -webkit-transform: rotate(-90deg);
}
div.grid-view table td.results-cell{
  padding: 30px;
  font-size: ;
}
div.grid-view td.results-cell span.patient-number{
  font-size: 200%;
}
div.grid-view td.results-cell{
  color: #000;
  background-color: #FFF;
  transition: background-color .15s linear;
}
  div.grid-view td.results-cell:hover {
    background-color: #EEE;
    cursor: pointer;
  }</code>
    </property>
    <property>
      <name>GridViewStyle</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>data.MendelianResults</name>
    <number>2</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>405d6425-08d3-4bd2-b8d6-5af2aacb089e</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>#chart{
  font: 10px sans-serif;
}
.axis text{
  font: 10px sans-serif;
}

#chart .axis path, .axis line{
  fill:none;
  stroke:#000;
  shape-rendering: crispEdges;
}

#chart .box-plot{
  fill: #FFF;
  fill-opacity: 0;
  stroke: #000;
  stroke-width: 1.5px;
}
#chart line.box-plot.whisker {
  stroke-dasharray: 5,5;
}
  #chart g.category:hover .box-plot{
    stroke: #9F000F;
  }

#chart circle.data-point{
  fill: steelblue;
  opacity: 0.7;
}

#chart rect.hover-box{
  opacity:0;
  transition: all .2s linear;
}
 #chart g.category:hover rect.hover-box{
   box-shadow: 0 0 3px black;
   cursor: pointer;
 }

#chart text.box-label {
  font: 10px sans-serif;
  opacity: 0;
  transition: opacity .2s linear;
}
  #chart g.category:hover text.box-label {
    opacity: 1;
  }


#chart *.info-label{
  opacity: 0;
  transition: opacity .2s linear;
}
#chart text.info-label{
  fill: #FFF;
}
#chart g.category:hover *.info-label{
  opacity: 1;
}</code>
    </property>
    <property>
      <name>BoxPlotStyle</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
